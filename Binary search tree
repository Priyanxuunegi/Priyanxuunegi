#include<stdio.h>
#include<stdlib.h>

struct node{
    int data ; 
    struct node *lchild ; 
    struct node *rchild ;
} ;




// FUNTION FOR ITEREATIVE CREATEATION OF BINARY SEARCH TREE 
/* 
struct node *create(struct node *p , int key){
      if(p==NULL){
          struct node *newnode ; 
          newnode = (struct node *)malloc(sizeof(struct node)) ;
          newnode -> data = key ; 
          newnode -> lchild = newnode -> rchild = NULL ; 
          p = newnode ; 
          return p ; 
      }
     struct node *t , *r ; 
     t = p ;
     while(t!=NULL){
         r = t ; 
         if(key <  t->data)
             t = t->lchild ;
             
        else if(key>t->data)
             t = t->rchild ; 
         
         else 
         return p ; 
     }
         
          struct node *newnode ; 
          newnode = (struct node *)malloc(sizeof(struct node)) ;
          newnode -> data = key ; 
          newnode -> lchild = newnode -> rchild = NULL ; 
     
     
     
     if(key < r->data)
         r->lchild = newnode ;
        
      else 
         r->rchild = newnode ;
        
      
   return p ;     
}
*/
// FUNTION FOR RECURSIVE INSERT 
struct node *createRECURSION(struct node *p , int key){
    if(p==NULL){
        struct node *newnode ; 
          newnode = (struct node *)malloc(sizeof(struct node)) ;
          newnode -> data = key ; 
          newnode -> lchild = newnode -> rchild = NULL ; 
          p = newnode ;
    return p ;
    }
    
    if(key < p->data)
          p -> lchild = createRECURSION(p->lchild , key) ;
    else if(key > p->data)
          p -> rchild = createRECURSION(p->rchild,key) ;
return p ;
}


void inorder(struct node *p){
    
    if(p){
    inorder(p->lchild) ;
    printf("%d  ",p->data) ;
    inorder(p->rchild) ;
    }
}

int main(){
   
    struct node *root  ;
   root = NULL ; 
   int choice = 1 ; 
   while(choice){
       int key ; 
       printf("Enter data: ") ;
       scanf("%d",&key) ;
       root = createRECURSION(root,key) ;
       
    printf("Enter your choice!  ") ;
    scanf("%d",&choice) ;
}

inorder(root) ;


return 0 ;
}

